{"ast":null,"code":"var _jsxFileName = \"/Users/shaobozhang/my_codes/my_next/pages/index.jsx\",\n    _dec,\n    _class,\n    _temp;\n\nvar __jsx = React.createElement;\nimport React from 'react';\nimport Link from 'next/link';\nimport * as BABYLON from 'babylonjs';\nimport \"../style/index.css\";\nimport dynamic from 'next/dynamic';\nimport '../style/page_index.css';\nimport Ske from '../layout/Ske';\nimport { inject, observer } from \"mobx-react\";\nconst RustComponent = dynamic({\n  loader: async () => {\n    // let cc = await import('../public/pkg/wasm_pack.js')\n    // let dd = await import('../public/pkg/wasm_pack_bg.wasm')\n    return () => __jsx(Ske, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 15\n      },\n      __self: this\n    }, __jsx(Juicy, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 16\n      },\n      __self: this\n    }));\n  }\n});\nlet Juicy = (_dec = inject('store'), _dec(_class = observer(_class = (_temp = class Juicy extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.draw2canvas = (file, canvEle, shadow = null) => {\n      console.log('here');\n      let pic = document.createElement('img');\n      pic.src = window.URL.createObjectURL(file);\n\n      pic.onload = () => {\n        canvEle.width = pic.width;\n        canvEle.height = pic.height;\n        canvEle.getContext('2d').drawImage(pic, 0, 0);\n\n        if (shadow != null) {\n          shadow.width = pic.width;\n          shadow.height = pic.height;\n          shadow.getContext('2d').drawImage(pic, 0, 0);\n        }\n      };\n    };\n\n    this.createTexture = scene => {\n      //尝试创建材质\n      let tex = new BABYLON.StandardMaterial('mt', scene);\n      tex.emissiveColor = new BABYLON.Color3(1, 0, 1); //红色 emmissive 代表本身的颜色 RGB\n      //tex.diffuseColor = new BABYLON.Color3(1,0,0) //绿色 漫反射\n      // tex.specularColor = new BABYLON.Color3(0, 1, 0) //蓝色 镜面反射\n      // tex.ambientColor = new BABYLON.Color3(0,0,1)\n\n      window.__tex = tex;\n      return tex;\n    };\n\n    this.createScene = (eng, canvas) => {\n      let scene = new BABYLON.Scene(eng); //scene.ambientColor= new BABYLON.Color3(1,1,1);\n\n      let camera = new BABYLON.FreeCamera('camera1', new BABYLON.Vector3(10, 10, 0), scene); //let camera =  new BABYLON.ArcRotateCamera('c2',Math.PI/2, 0, 10,new BABYLON.Vector3.Zero(),scene);\n\n      camera.setTarget(new BABYLON.Vector3(0, 0, 0)); //设定你要朝向哪个方向\n\n      camera.attachControl(canvas, true); //让你可以控制\n      //camera.setPosition(new BABYLON.Vector3(0,0,10))\n      //camera.target=new BABYLON.Vector3(0,0,0);\n      // Create a basic light, aiming 0, 1, 0 - meaning, to the sky\n\n      {\n        let light = new BABYLON.PointLight('light1', new BABYLON.Vector3(0, 5, 0), scene);\n        light.diffuse = new BABYLON.Color3(0, 0, 1); //光的基本颜色\n\n        light.specular = new BABYLON.Color3(0, 1, 0);\n      } //light.specular = new BABYLON.Color3(1,1,1);\n\n      let ground = BABYLON.MeshBuilder.CreateGround('jude', {\n        width: 8,\n        height: 8\n      });\n      ground.material = this.createTexture(); //let light2 = new BABYLON.SpotLight('s1',)\n      //let light2  = new BABYLON.PointLight('l2',new BABYLON.Vector3(0,5,0),scene);\n      //BABYLON.MeshBuilder.CreateSphere(\"sphere\", {}, scene).position=new BABYLON.Vector3(0,0,2); //default sphere\n      //BABYLON.MeshBuilder.CreateSphere(\"sphere\", {}, scene).position=new BABYLON.Vector3(2,0,2); //default sphere\n      //sphere.position=new BABYLON.Vector3(0,0,0)\n      //var myPlane = BABYLON.MeshBuilder.CreatePlane(\"myPlane\", {width: 2, height: 2, sourcePlane: new BABYLON.Plane(1,1,0,0) }, scene);\n      // Create a built-in \"sphere\" shape; its constructor takes 6 params: name, segment, diameter, scene, updatable, sideOrientation\n      // let sphere = BABYLON.Mesh.CreateSphere('sphere1', 16, 2, scene, false, BABYLON.Mesh.FRONTSIDE);\n      // Move the sphere upward 1/2 of its height\n      // sphere.position.y = 1;\n      // Create a built-in \"ground\" shape; its constructor takes 6 params : name, width, height, subdivision, scene, updatable\n      // let ground = BABYLON.Mesh.CreateGround('ground1', 6, 6, 2, scene, false);\n\n      return scene;\n    };\n\n    this.canvasRef = React.createRef();\n    this.canvasShadow = React.createRef();\n  }\n\n  render() {\n    return __jsx(\"div\", {\n      id: \"index_wrapper\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 87\n      },\n      __self: this\n    }, __jsx(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 88\n      },\n      __self: this\n    }), __jsx(\"div\", {\n      id: \"canvas_wrapper\",\n      width: 1000,\n      height: 600,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 101\n      },\n      __self: this\n    }, __jsx(\"canvas\", {\n      ref: this.canvasRef,\n      width: 1000,\n      height: 600,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 102\n      },\n      __self: this\n    }), __jsx(\"canvas\", {\n      ref: this.canvasShadow,\n      style: {\n        display: 'none'\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 103\n      },\n      __self: this\n    })), __jsx(\"img\", {\n      id: \"shadow\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 105\n      },\n      __self: this\n    }));\n  }\n\n  componentDidMount() {\n    console.log('canvas!', this.canvasRef);\n    console.log(this.props.www);\n    console.log(this.props.mmm);\n    window.__shadow = this.canvasShadow.current;\n    window.__canvas = this.canvasRef.current;\n    let _ = this.canvasRef.current;\n    let eng = new BABYLON.Engine(_, true, {\n      preserveDrawingBuffer: true,\n      stencil: true\n    });\n    let scene = this.createScene(eng, _);\n    eng.runRenderLoop(function () {\n      scene.render();\n    });\n  }\n\n}, _temp)) || _class) || _class);\nexport default Juicy;","map":{"version":3,"sources":["/Users/shaobozhang/my_codes/my_next/pages/index.jsx"],"names":["React","Link","BABYLON","dynamic","Ske","inject","observer","RustComponent","loader","Juicy","Component","constructor","props","draw2canvas","file","canvEle","shadow","console","log","pic","document","createElement","src","window","URL","createObjectURL","onload","width","height","getContext","drawImage","createTexture","scene","tex","StandardMaterial","emissiveColor","Color3","__tex","createScene","eng","canvas","Scene","camera","FreeCamera","Vector3","setTarget","attachControl","light","PointLight","diffuse","specular","ground","MeshBuilder","CreateGround","material","canvasRef","createRef","canvasShadow","render","display","componentDidMount","www","mmm","__shadow","current","__canvas","_","Engine","preserveDrawingBuffer","stencil","runRenderLoop"],"mappings":"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","sourcesContent":["import React from 'react'\nimport Link from 'next/link';\nimport { Upload, message, Button, List } from 'antd';\nimport * as BABYLON from 'babylonjs'\nimport \"../style/index.css\"\nimport dynamic from 'next/dynamic'\nimport '../style/page_index.css'\nimport Ske from '../layout/Ske'\nimport { inject, observer } from \"mobx-react\"\nconst RustComponent = dynamic({\n  loader: async () => {\n    // let cc = await import('../public/pkg/wasm_pack.js')\n    // let dd = await import('../public/pkg/wasm_pack_bg.wasm')\n    return () => (\n      <Ske>\n        <Juicy />\n      </Ske>\n    )\n  },\n})\n@inject('store')\n@observer\nclass Juicy extends React.Component {\n  constructor(props) {\n    super(props)\n    this.canvasRef = React.createRef();\n    this.canvasShadow = React.createRef();\n  }\n  draw2canvas = (file, canvEle, shadow = null) => {\n    console.log('here')\n    let pic = document.createElement('img')\n    pic.src = window.URL.createObjectURL(file)\n    pic.onload = () => {\n      canvEle.width = pic.width\n      canvEle.height = pic.height\n      canvEle.getContext('2d').drawImage(pic, 0, 0)\n      if (shadow != null) {\n        shadow.width = pic.width\n        shadow.height = pic.height\n        shadow.getContext('2d').drawImage(pic, 0, 0)\n      }\n    }\n  }\n  createTexture = (scene) => {//尝试创建材质\n    let tex = new BABYLON.StandardMaterial('mt', scene)\n    tex.emissiveColor = new BABYLON.Color3(1,0,1) //红色 emmissive 代表本身的颜色 RGB\n    //tex.diffuseColor = new BABYLON.Color3(1,0,0) //绿色 漫反射\n    // tex.specularColor = new BABYLON.Color3(0, 1, 0) //蓝色 镜面反射\n    // tex.ambientColor = new BABYLON.Color3(0,0,1)\n    window.__tex = tex;\n    return tex\n  }\n  createScene = (eng, canvas) => {\n    let scene = new BABYLON.Scene(eng);\n    //scene.ambientColor= new BABYLON.Color3(1,1,1);\n    let camera = new BABYLON.FreeCamera('camera1', new BABYLON.Vector3(10, 10, 0), scene);\n    //let camera =  new BABYLON.ArcRotateCamera('c2',Math.PI/2, 0, 10,new BABYLON.Vector3.Zero(),scene);\n    camera.setTarget(new BABYLON.Vector3(0, 0, 0));//设定你要朝向哪个方向\n    camera.attachControl(canvas, true);//让你可以控制\n    //camera.setPosition(new BABYLON.Vector3(0,0,10))\n    //camera.target=new BABYLON.Vector3(0,0,0);\n    // Create a basic light, aiming 0, 1, 0 - meaning, to the sky\n    {\n      let light = new BABYLON.PointLight('light1', new BABYLON.Vector3(0, 5, 0), scene);\n      light.diffuse = new BABYLON.Color3(0, 0, 1); //光的基本颜色\n      light.specular = new BABYLON.Color3(0, 1, 0);\n    }\n    //light.specular = new BABYLON.Color3(1,1,1);\n    let ground = BABYLON.MeshBuilder.CreateGround('jude', { width: 8, height: 8 });\n    ground.material = this.createTexture()\n    //let light2 = new BABYLON.SpotLight('s1',)\n    //let light2  = new BABYLON.PointLight('l2',new BABYLON.Vector3(0,5,0),scene);\n    //BABYLON.MeshBuilder.CreateSphere(\"sphere\", {}, scene).position=new BABYLON.Vector3(0,0,2); //default sphere\n    //BABYLON.MeshBuilder.CreateSphere(\"sphere\", {}, scene).position=new BABYLON.Vector3(2,0,2); //default sphere\n    //sphere.position=new BABYLON.Vector3(0,0,0)\n    //var myPlane = BABYLON.MeshBuilder.CreatePlane(\"myPlane\", {width: 2, height: 2, sourcePlane: new BABYLON.Plane(1,1,0,0) }, scene);\n    // Create a built-in \"sphere\" shape; its constructor takes 6 params: name, segment, diameter, scene, updatable, sideOrientation\n    // let sphere = BABYLON.Mesh.CreateSphere('sphere1', 16, 2, scene, false, BABYLON.Mesh.FRONTSIDE);\n    // Move the sphere upward 1/2 of its height\n    // sphere.position.y = 1;\n    // Create a built-in \"ground\" shape; its constructor takes 6 params : name, width, height, subdivision, scene, updatable\n    // let ground = BABYLON.Mesh.CreateGround('ground1', 6, 6, 2, scene, false);\n    return scene;\n  }\n  render() {\n    return (\n      <div id=\"index_wrapper\">\n        <div>\n          {/*<Upload\n            fileList={[]}\n            beforeUpload={file=>{\n              console.log(file)\n              this.draw2canvas(file, this.canvasRef.current, this.canvasShadow.current)\n            }}\n          >\n            <Button>\n              Upload ur Pic\n            </Button>\n          </Upload>*/}\n        </div>\n        <div id=\"canvas_wrapper\" width={1000} height={600}>\n          <canvas ref={this.canvasRef} width={1000} height={600} />\n          <canvas ref={this.canvasShadow} style={{ display: 'none' }} />\n        </div>\n        <img id='shadow' />\n      </div>\n    )\n  }\n  componentDidMount() {\n    console.log('canvas!', this.canvasRef)\n    console.log(this.props.www)\n    console.log(this.props.mmm)\n    window.__shadow = this.canvasShadow.current\n    window.__canvas = this.canvasRef.current\n    let _ = this.canvasRef.current\n    let eng = new BABYLON.Engine(_, true, { preserveDrawingBuffer: true, stencil: true })\n    let scene = this.createScene(eng, _);\n    eng.runRenderLoop(function () {\n      scene.render();\n    })\n  }\n}\nexport default Juicy"]},"metadata":{},"sourceType":"module"}